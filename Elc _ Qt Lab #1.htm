<html><head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Elc &gt; Qt Lab #1</title>

<style>

body {
  font-family: arial, helvetica, sans-serif;
  font-size: 12pt;
  margin-left: 40px;
}

a:link    {color:steelblue;}
a:visited {color:slategrey;}
a:hover   {background-color:yellow;}

em {
  font-style: normal;
  color: #dd5e19;
}

li {
  margin-bottom: 5px;
  padding-bottom: 0px;
}

h1 {
  font-size: 40pt;
  color: steelblue;
  margin-top:40px;
  margin-bottom:10px;
}

h2 {
  font-size: 16pt;
  color: indianred;
  margin-bottom:0px;
  padding-bottom: 0px;
}

h3 {
  font-size: 16pt;
  color: indianred;
  margin-top: 30px;
  margin-bottom:  0px;
  padding-bottom: 0px;
}

</style>
</head>


<!-- -------------------------------------------------------------- -->


<body>

  <h1>Qt Lab #1</h1>
  <a href="http://www.telecom-paris.fr/~elc" target="more">Eric Lecolinet</a>
  -
  <a href="http://www.telecom-paristech.fr/" target="more">Télécom Paris</a>
  -
  <a href="http://www.infres.enst.fr/" target="more">Dept. INFRES</a>
  <br>
  <br>


<h2>Useful links</h2>

<ul>

<li>
Courses:
<a href="http://www.telecom-paristech.fr/~elc/qt/" target="doc">Qt page</a>
-
<a href="http://www.telecom-paristech.fr/~elc/ihm" target="doc">HCI Courses</a>
-
<a href="http://www.telecom-paristech.fr/~elc/igr201" target="doc">UE IGR201b</a>
</li>

<li>
Qt:
<a href="http://doc.qt.io/qt-5/" target="doc">Qt5</a>
- <a href="http://doc.qt.io/qt-5/qtwidgets-index.html" target="doc">GWidgets</a>
- <a href="http://doc.qt.io/qt-5/qtwidgets-module.html" target="doc">Classes</a>
</li> 

<li>
C++:
<a href="http://www.cplusplus.com/" target="doc">Doc C++</a>
- <a href="http://perso.telecom-paristech.fr/~elc/cpp/C++Objet.pdf" target="doc">Cours C++</a>
- <a href="http://www.telecom-paristech.fr/~elc/inf224" target="doc">UE INF224</a>
</li>

</ul>
<p>

<!-- ------------------------------------------------------------------- -->


</p><h3>1st Step</h3>
<p>
Start <em><b>QtCreator</b></em> (through the Developpement menu or by typing
<tt>qtcreator &amp;</tt> in the  Terminal), then select:
</p><ul>
  <li> <em>File</em> </li>
  <li> <em>New file or project... </em> </li>
  <li> <em>Application (in Project) / Qt Widgets Application</em> </li>
  <li> enter a <em>project name</em>, a directory with the same name will be created
  (you can also specify a different  directory )
  </li>
  <li> click on <em>Next, OK, Finish...</em> without worrying about other options
  </li>
</ul>

<p>
Five file have then been created by  QtCreator :
</p><ul>
<li> project_name<em>.pro</em> : specifies the <b>Qt project</b> (the name will be
the one you indicated).
</li>
<li> <em>main.cpp</em> : creates an instance of <b>QApplication</b> and
  the <b>MainWindow</b> classes
</li>
<li> <em>mainwindow.h</em> : the header file declaring the <b>MainWindow</b> class
</li>
<li> <em>mainwindow.cpp</em> : the implementation file of the <b>MainWindow</b> class
</li>
<li> <em>mainwindow.ui</em> : the XML file generated by <b>QtDesigner</b>
(We will not use it in this lab, it will be the subject of another session).</li>
</ul>

Look at the contents of these files. The only ones we'll need
to edit today are those of the  <em>MainWindow</em> class, i.e.
<b>mainwindow.h</b> and <b>mainwindow.cpp</b>.
The file <b>main.cpp</b> is standard and usually does not need to be
amended.
Other files will then be created by QtCreator (the executable, the .o,
moc_ * files, etc.) either in this directory, or in a directory
hidden depending on the version and configuration of <em>QtCreator</em>.
<p></p>



<h3>2nd Step: Adding widgets to the main window</h3>
<p>
The <em>MainWindow</em> class derives from <em>QMainWindow</em>. It will
allow you to implement the functionalities decribed in the next questions.
At the moment it doesn't do much more than QMainWindow.
To see what happens, compile and run by clicking on the
<em>green arrow</em> (bottom left) of QtCreator. Notice the
<em>Compilation</em> bar a little hihgher. It is gray during
compilation, green if the compilation was successful and red otherwise.
Clicking on this bar  makes the errors appear (or disappear).
</p>
<p>
Create a menu bar and a "File" menu containing 3 items for activating the
"Open ...", "Save ..." and "Quit ..." commands. Also create a toolbar
allowing to activate the same commands. Use <em> QAction </em>
and specify appropriate hot keys and tooltips
(we will assume that we have three .png files containing the images of the
icons of these commands).
Finally, change the source code so that the central area of the MainWindow
will display a
<em> QTextEdit </em> (remember to include the corresponding header and
declare variable appropriately).
You can now compile and run the program.
</p>


<p>
<b> Note: </b>
<em> QtCreator </em> automatically adds <b>ui-&gt;setupUi(this);</b>
in the <em> MainWindow </em> constructor. This serves to instantiate
the graphical interface created by <em> QtDesigner </em>.
As for the moment we do not use it, you will need to <b> comment this line </b>
and create a status bar by calling the <em> statusBar() </em> method
of the <em> QtMainWindow </em> class.



</p><h3>3rd Step: Add ressources</h3>
<p>
Download the .png files containing the icon images in
a sub-directory of your Qt project (you can for example download
<a href="http://perso.telecom-paristech.fr/~elc/qt/icons.zip">these icon files</a>).
Make sure that the icons specified in the source code have the same names
as the files, then click on:
</p><ul>
  <li> <em>New File or Project... </em> </li>
  <li> <em>Qt (in Files and Classes) / Qt Resource File</em> </li>
</ul>
A resource file (<em> .qrc </em> extension) is then created.
Right click on the .qrc file and select "Open in Editor" to edit it,
then add the images. Finally, set the <em> Prefix </em> as follows:
If the icon names start with : and are the same as the paths of the images as
shown in the editor the prefix must be /. If they only contain the image names
without the image directory it should be /your_image_directory (if there is one).
<br>
Recompile and check that the menu bar actually displays the icons
<p></p>



<h3>4th Step: Defining and connecting the  slots</h3>
<p>
Declare and implement the <em>openFile</em>(), <em> saveFile</em>()
and <em> quitApp </em>() slots.
For now they will just display a message (e.g. the name of the slot)
on the console (NB: if you use <em> std::cout </em> and <em> std::endl </em>
do not forget to include the <em> iostream </em> header. Alternately you
can also use <em>qDebug()</em>.
Connect the slots to the corresponding actions, then compile and test
the program.
</p>




<h3>5th Step: Dialog boxes for opening and saving a file</h3>
<p>
Implement the <em> openFile</em>()
and <em> saveFile </em>() slots so that each of them open a dialog box.
These dialog boxes will serve to select the a file, either for reading the text or
for writing it. You will typically use the <em> QFileDialog </em> widget for this purpose.
Retrieve the name of the selected file and display it on the console.
</p>
<p>
Notes:
</p><ul>
<li>
You cannot directly display a <em> QString </em> (the string returned by the
dialog) on <em> std::cout </em>, why?
One solution is to use the <em> qPrintable() </em> macro, another one is
to display the string using <em> qDebug() </em>
</li><li>
  The dialog boxes are <em> "modal" </em>, meaning that
  the user can only interact with the dialog box as long as it is open.
  This aims to focus his/her attention on the dialog box, and also
  simplifies programming. Why programming
  would be more complex if the dialog boxes were not modal?
</li></ul>




<h3>6th Step: Open / save an HTML page</h3>
<p>
Add source code in the <em> openFile </em> () slot
to make it read the file selected in the Open dialog box
and display its content in the <em> QTextEdit </em>.
For this purpose, you can use a <em> QFile </em> and a <em> QTextStream </em>
(note that it's easier to read the entire content of the file in a single step).
The textual content (a QString) can then be set to the <em> QTextEdit </em>
through its <em> setHtml </em> () method. This method assumes the content is
in HTML (we could use setPlainText() for plain text).
</p>
<p>
Conversely, following the same principle, make the <em> saveFile </em> () slot
save the content of the <em> QTextEdit </em> widget
in the file selected through the Save dialog box.
Note: you can use the  <em>&lt;&lt;</em>  operator).
</p>



<h3>8th Step: Prompt for confirmation when exiting the application</h3>
<p>
First, make the <em> Quit </em> button to open
a <em> QMessageBox </em> (with "Yes" and "No" buttons)
allowing the user to ask for confirmation before exiting the application.
However, this is not sufficient because the user can also exit the program
by clicking on the close button of the window bar (usually a cross, a red button, etc.)
Change <em> MainWindow </em>  so that this action will have the same effect as when
clicking on the <em> Quit </em> button (i.e. open the QMessageBox)
</p>
<p>
<b>Note:</b> this will require redefining the <em>QWidget::closeEvent</em>()
method.
</p>


<!-- ------------------------------------------------------------------- -->

<br>
<hr>
<a href="http://www.telecom-paristech.fr/~elc">Eric Lecolinet</a>
<font color="darkgrey"> - http://www.telecom-paristech.fr/~elc - Telecom ParisTech</font>
<br>
<br>



</body></html>